#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    _ = require('lodash'),
    vm = require('vm'),
    minimatch = require('minimatch');

var Suite = require('../src/scenario/driver');
var grid = require('../src/index');
var GridError = require('../src/error/grid');
var ConsoleReporter = require('../src/reporter/console');
var program = require('commander');

program
    .version('please read it from package.json')
    .usage('[options] <files ...>')
    .option('-r, --recursive', 'search files recursively')
    .option('-p, --pattern [pattern]', 'filename pattern', '*.js')
    .option('-c, --config [pattern]', 'config files, comma separated', function (val) {return val.split(',');}, ['selenium-grid.json'])
    .parse(process.argv);


// parameters
var files = program.args || ['examples'],
    recursive = program.recursive,
    pattern = program.pattern,
    configFiles = program.config;

// retrieve all test files to execute.
var scenarios = [];
files.forEach(function (file) {
    scenarios = scenarios.concat(retrieveScenarios(file, recursive));
});

// create a test case per file.
var cases = createTestCaseFromScenarios(scenarios);
// add the default config
var config = _.defaults(retrieveConfig(), {
        before: function (grid) {
            // register reporters
            reporter = new ConsoleReporter();
            reporter.register(grid);
        }
    });

grid.run(
    config,
    cases, function (err) {
//    console.log(err.toString());
    process.exit(err ? 1 : 0);
});

function retrieveScenarios(filepath, recursive) {
    var scenarios = [];
    if (!fs.existsSync(filepath)) {
        return scenarios;
    }
    var stats = fs.statSync(filepath);
    // file ?
    if (stats.isFile()) {
        if (minimatch(filepath, pattern, {matchBase: true})) {
            scenarios.push(filepath);
        }
        return scenarios;
    }
    // not a file, should continue only it directory AND recursive
    if (!stats.isDirectory() || !recursive) {
        return scenarios;
    }
    fs.readdirSync(filepath).forEach(function (filename) {
        var file = path.join(filepath, filename);
        var ret = retrieveScenarios(file, recursive);
        scenarios = scenarios.concat(ret);
    });

    return scenarios;
}

function createTestCaseFromScenarios(scenarios) {
    var suites = [];
    scenarios.forEach(function (scenario) {
        var suite = new Suite();
        suites.push(suite);
        driver(suite, global);
        scenario = path.resolve(scenario);
        require(scenario);
    });
    return suites;
}

function driver(suite, ctx) {
    ctx.describe = function (description, callback) {
        // 1. create a new suite
        suite.name = description;
        // 2. execute function in suite context
        suite.doRun = callback;
    };
    ctx.timeout = function (timeout) {
        suite.timeout = timeout;
    };
}

function retrieveConfig () {
    var home = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
    var config = {};
    var homeConfigFile = path.join(home, '.selenium-grid.json');
    [homeConfigFile].concat(configFiles|| []).forEach(function (file) {
        if (fs.existsSync(file)) {
            config = _.extend(config, JSON.parse(fs.readFileSync(file)));
        }
    });

    return config;
}
